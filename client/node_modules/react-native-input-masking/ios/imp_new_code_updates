  @objc var fontType: String = "PB"
 
 
   func validateCharacter(_char: Character) -> Bool{
    var isValidated = false;
      if(_char == "-" || _char == "(" || _char == ")" || _char == "#" || _char == "@"){
        isValidated =  true
      }
    if(_char == "+" || _char == "*" || _char == "|" || _char == " "){
      isValidated =  true
    }
    if(_char == "/"){
      isValidated =  true
    }
    
          if(_char.isLetter && _char.isLowercase){
            isValidated =  true

          }
          if(_char.isNumber){
          isValidated =  true

          }
    
    
    
    if(!isValidated){
      onErrorForMasking!(["error":"Unknown masking identifier"])
    }

    return isValidated
  }
  
  
 @objc func focus() {
    self.textField.becomeFirstResponder()
    print("Became first responder by js ref focus")
  }
  
  @objc func update(value: NSNumber) {
     print("Getting ref value count from js: ", value)
   }



     private func setFontType() -> UIFont {
    for family in UIFont.familyNames.sorted() {
        let names = UIFont.fontNames(forFamilyName: family)
        print("Family: \(family) Font names: \(names)")
    }
    
    guard let customFont = UIFont(name: fontType, size: textSize) else{
      onErrorForMasking!(["error":"Failed to Load the font provided"])
      print("Failed to find font provided")
      return UIFont(name: "AmericanTypewriter-CondensedBold", size: textSize)!;
    }
    return customFont
    

  }


    case "fontType":
          self.textField.font = setFontType()
          print("One prop at a time", prop)


@objc (InputMasking)
class InputMasking: RCTViewManager {
  override class func requiresMainQueueSetup() -> Bool {
    return true;
  }
  

  
  override func view() -> UIView! {
//    var View  = SimpleInput()
    return SimpleInput()
  }
  
  
  @objc  func focus(_ node:NSNumber) {
      DispatchQueue.main.async {
        let nativeComponent = self.bridge.uiManager.view(forReactTag: node) as! SimpleInput
        nativeComponent.focus()
      }
    }
    
   
    
    @objc func updateFromManager(_ node: NSNumber, count: NSNumber) {
       
       DispatchQueue.main.async {                                // 2
         let nativeComponent = self.bridge.uiManager.view(             // 3
           forReactTag: node                                     // 4
         ) as! SimpleInput                                       // 5
         nativeComponent.update(value: count)                          // 6
       }
     }
}      




////////.m file imports

#import <Foundation/Foundation.h>
#import <React/RCTViewManager.h>
#import <React/RCTUIManager.h>
#import <React/RCTLog.h>
#import <React/RCTBridgeModule.h>



////////bridgingHeaderImports



#import "React/RCTBridgeModule.h"
#import "React/RCTViewManager.h"
#import "React/RCTEventEmitter.h"
#import <React/RCTUIManager.h>
#import <React/RCTBridge.h>
#import <React/RCTLog.h>
